(def (make-string &opt contents)
  (annotate 'string
            (if contents
                (copy-bytes contents)
                (make-bytevector))))

(def (make-adjustable-string &opt (n 0))
  (annotate 'string (make-adjustable-bytevector n)))

(def (copy-string s)
  (make-string (copy-bytes (rep s))))

(def (string-size s) (bytevector-size (rep s)))

(def (string-push-back s r)
  (let b (rep s)
    (withs (m (bytevector-size b)
            n (rune-length r))
      (bytevector-resize b (+ m n))
      (encode-rune! b m r)
      s)))

(def-method (push-back (x string) value)
  (string-push-back x value))

(macro (accumulate-to-string acc-fn &rest body)
  (w/uniq (gs)
    `(withs (,gs (make-adjustable-string)
             ,acc-fn (fn (r) (string-push-back ,gs r)))
       ,@body
       ,gs)))

(def (string &rest runes)
  (accumulate-to-string acc
    (list-for-each runes (fn (r) (acc r)))))

(def-generic (as-string x))

(def-method (as-string (x wstring))
  (accumulate-to-utf8-string acc
    (for c x
      (acc c))))

(def (string-for-each x f)
  (with (b (rep x)
         i 0
         n (string-size x))
    (while (< i n)
      (let r (decode-rune b i)
        (f r)
        (set i (+ i (rune-length r)))))))

(def (write-string x s)
  (if (is-a s 'output-port)
      (write-bytes s (rep x))
      (string-for-each x (fn (c) (write-char c s)))))

(def-method (write-object (x string) s) (write-string x s))

(def-method (serialize (x string) s)
  (write-char #\" s)
  (string-for-each x (fn (c)
                            (if (is c #\")
                                (write-string "\\\"" s)
                                (write-char c s))))
  (write-char #\" s))

(def (find-rune s r)
  (withs (b   (rep s)
          n   (bytevector-size b)
          rb  (encode-rune r)
          rl  (bytevector-size rb))
     ((afn (i j)
        (if (= j rl)      i
            (= (+ i j) n) nil
            (= (bytevector-ref b (+ i j))
               (bytevector-ref rb j))     (self i (+ j 1))
                                          (self (+ i j) 0)))
      0 0)))


