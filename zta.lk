(assign list (fn xs xs))

(assign macro
  (annotate 'macro
            (fn (sig &rest body)
              `(assign ,(car sig)
                    (annotate 'macro (fn ,(cdr sig) ,@body))))))

(macro (def sig &rest body)
  (if (symbol? sig)
      `(assign ,sig ,(if body (car body) 'nil))
      `(assign ,(car sig) (fn ,(cdr sig) ,@body))))

(macro (do &rest body)
  `((fn () ,@body)))

(def (is-a x y) (is (type x) y))

(def (macro? x) (is-a x 'macro))

(def (callable? x)
  (proc? (rep x)))

(def (cadr x) (car (cdr x)))
(def (cddr x) (cdr (cdr x)))
(def (caar x) (car (car x)))
(def (cdar x) (cdr (car x)))

(def (isnt x y) (not (is x y)))

(def (null? x) (is x nil))
(def (not x) (is x nil))
(def (none? x) (is x none))

(macro (rfn sig &rest body)
  ((fn (name params)
     `((fn (,name)
         (assign ,name (fn ,params ,@body))
         ,name)
       nil))
   (car sig) (cdr sig)))

(macro (afn params &rest body)
  `(rfn (self ,@params) ,@body))

(def (list-length xs)
  ((afn (n xs)
     (if (null? xs)
         n
         (self (+ n 1) (cdr xs))))
   0 xs))

(def (reverse xs)
  ((afn (rs xs)
     (if (null? xs)
         rs
         (self (cons (car xs) rs) (cdr xs))))
   nil xs))

(def (remove x l)
  ((afn (r l)
     (if (null? l)      (reverse r)
         (is x (car l)) (self r (cdr l))
                        (self (cons (car l) r) (cdr l))))
   nil l))

(def (pair xs)
  ((afn (ps xs)
     (if (null? xs)       (reverse ps)
         (null? (cdr xs)) (self (cons (list (car xs)) ps) nil)
                          (self (cons (cons (car xs) (cadr xs)) ps) (cddr xs))))
   nil xs))

(def (intersperse xs ys)
  (if (null? xs)
      ys
      (cons (car xs) (intersperse ys (cdr xs)))))

(def (list-map f xs)
  ((afn (rs xs)
     (if (null? xs)
         (reverse rs)
         (self (cons (f (car xs)) rs) (cdr xs))))
   nil xs))

(macro (and &rest args)
  (if (null? args)       'true
      (null? (cdr args)) (car args)
                         `(if ,(car args) (and ,@(cdr args)) false)))

(def (car-is x y)
  (and (pair? x)
       (is (car x) y)))

(macro (with bindings &rest body)
  ((fn (gen)
     ((rfn (destructure pb vars exprs rest)
         (if (null? pb)          (gen vars exprs rest)
             (symbol? (caar pb)) (destructure (cdr pb)
                                              (cons (caar pb) vars)
                                              (cons (cdar pb) exprs)
                                              rest)
             (car-is (caar pb) 'vector)
               ((afn (g)
                  (destructure (cdr pb)
                               (cons g vars)
                               (cons (cdar pb) exprs)
                               (list-append ((afn (xs rs n)
                                               (if (null? xs)
                                                   rs
                                                   (self (cdr xs)
                                                         (cons (car xs) (cons `(ref ,g ,n) rs))
                                                         (+ n 1))))
                                             (cdr (caar pb)) nil 0)
                                            rest)))
                (gensym))
                                 (error "Can't parse binding: " (caar pb))))
         (pair bindings) nil nil nil))
   (fn (vars exprs rest)
     (if (null? rest)
       `((fn ,vars ,@body) ,@exprs)
       `((fn ,vars (with ,rest ,@body)) ,@exprs)))))

(macro (let var expr &rest body)
  `(with (,var ,expr)
     ,@body))

(macro (if-let var expr &rest rest)
  `(let ,var ,expr
     (if ,var ,@rest)))

(macro (withs bindings &rest body)
  (if (null? bindings)
      `(do ,@body)
      `(with (,(car bindings) ,(cadr bindings))
         (withs ,(cddr bindings)
           ,@body))))

(macro (w/uniq names &rest body)
  `(with ,(intersperse names (list-map (fn (_) '(gensym)) names))
     ,@body))

(macro (or &rest args)
  (if (null? args)
      'false
      (w/uniq (g)
        `(let ,g ,(car args)
           (if ,g ,g (or ,@(cdr args)))))))

(macro (when cnd &rest body)
  `(if ,cnd (do ,@body)))

(macro (unless cnd &rest body)
  `(if (not ,cnd) (do ,@body)))

(def (assoc x key &opt (eq is))
  (if (null? x)         nil
      (eq (caar x) key) (car x)
                        (assoc (cdr x) key)))

(def (alist-ref x key)
  (if-let e (assoc x key)
    (cdr e)
    nil))

(def (alist-for-each x f)
  (unless (null? x)
    (f (caar x) (cdar x))
    (alist-for-each (cdr x) f)))

; Using alist for now, will be replaced with hash-table once it's loaded
(def place-setters)

(def (place-setter getter-name)
  (alist-ref place-setters getter-name))

(def (add-place-setter getter-name setter-name)
  (assign place-setters (cons (cons getter-name setter-name) place-setters)))

(add-place-setter 'car 'set-car)
(add-place-setter 'car 'set-car)
(add-place-setter 'cdr 'set-cdr)
(add-place-setter 'vector-ref 'vector-set)

(macro (set place value)
  (if (symbol? place)
      `(assign ,place ,value)
      (let setter (place-setter (car place))
        `(,setter ,@(cdr place) ,value))))

(macro (swap0 place1 place2)
  (w/uniq (g)
    `(let ,g ,place1
       (set ,place1 ,place2)
       (set ,place2 ,g))))

(def (expand-place macro place &rest rest)
  (if (symbol? place)
      `(,macro ,place ,@rest)
      (let g (list-map (fn (_) (gensym)) (cdr place))
        `(with ,(intersperse g (cdr place))
           (,macro (,(car place) ,@g) ,@rest)))))

(macro (swap1 place1 place2 &opt next-swap)
  (expand-place (or next-swap 'swap0) place1 place2))

(macro (swap place1 place2)
  (if (and (symbol? place1)
           (symbol? place2)) `(swap0 ,place1 ,place2)
      (symbol? place1)       `(swap1 ,place2 ,place1)
      (symbol? place2)       `(swap1 ,place1 ,place2)
                             `(swap1 ,place1 ,place2 swap1)))

(macro (reset x)
  `(set ,x nil))

(macro (inc0 x n)
  `(set ,x (+ ,x ,n)))

(macro (inc x &opt (n 1))
  (expand-place 'inc0 x n))

(macro (dec0 x n)
  `(set ,x (- ,x ,n)))

(macro (dec x &opt (n 1))
  (expand-place 'dec0 x n))

(let sentinel (gensym)
  (def (make-param &opt x)
    (let value x
      (fn (&opt (new-value sentinel))
        (if (is new-value sentinel)
            value
            (set value new-value))))))

(macro (def-param name value)
  `(def ,name (make-param ,value)))

(macro (point name &rest body)
  (w/uniq (k)
    `(call/cc
       (fn (,k)
         (let ,name (fn (&opt (x none)) (,k x))
           ,@body)))))

(def-param current-exception-handler (fn (e) (exit 1)))

(def (call-with-exception-handler h thunk)
  (let old-handler (current-exception-handler)
    (point done
      (current-exception-handler (fn (e)
                                   (current-exception-handler old-handler)
                                   (done (h e))))
      (let value (thunk)
        (current-exception-handler old-handler)
        value))))

(macro (guard handler &rest body)
  `(call-with-exception-handler ,handler (fn () ,@body)))

(def (raise e)
  ((current-exception-handler) e))

(def (protect thunk after-thunk)
  (guard (fn (e) (after-thunk) (raise e))
    (let value (thunk)
      (after-thunk)
      value)))

(macro (after x &rest rest)
  `(protect (fn () ,x)
     (fn () ,@rest)))

(def (call-with-param param value thunk)
  (let old-value (param)
    (param value)
    (protect thunk
      (fn () (param old-value)))))

(macro (w/param param value &rest body)
  `(call-with-param ,param ,value (fn () ,@body)))

(def (list-ref xs i)
  (if (= i 0)
      (car xs)
      (list-ref (cdr xs) (- i 1))))

(macro (push x l)
  `(set ,l (cons ,x ,l)))

(macro (pop l)
  (w/uniq (g)
    `(let ,g (car ,l)
       (set ,l (cdr ,l))
       ,g)))

(macro (aand x &rest args)
  `(let it ,x
     (and it ,@args)))

(macro (while cnd &rest body)
  (w/uniq (g)
    `((rfn (,g)
        (when ,cnd
          ,@body
          (,g))))))

(macro (repeat n &rest body)
  (w/uniq (f i gn)
    `((rfn (,f ,i)
        (when (> ,i 0)
          ,@body
          (,f (- ,i 1))))
      ,n)))

(macro (for-len var x &rest body)
  (w/uniq (iter n)
    `(let ,n (len ,x)
       ((rfn (,iter ,var)
          (when (< ,var ,n)
            ,@body
            (,iter (+ ,var 1))))
        0))))

(def (bound-symbol? x)
  (and (symbol? x)
       (bound? x)))

(def (macroexpand x)
  (if (and (pair? x)
           (bound-symbol? (car x))
           (is-a (symbol-value (car x)) 'macro))
      (apply (rep (symbol-value (car x))) (cdr x))
      x))


(macro (whiler var expr cnd &rest body)
  (w/uniq (iter)
    `((rfn (,iter)
        (let ,var ,expr
          (if ,cnd
            (do ,@body
                (,iter))
            none))))))

(def (list? x)
  (or (pair? x)
      (null? x)))

(macro (def-generic sig &rest body)
  (withs (name (car sig)
          params (cdr sig)
          args (list-map (fn (x) (if (pair? x) (car x) x)) (remove '&opt params))
          vtable (symbol (wstring-append (symbol-name name) "-vtable"))
          f (gensym))
    `(do
       (def ,vtable (make-dict))
       (def (,name ,@params)
         (let ,f (dict-ref ,vtable (type ,(car params)))
           (if ,f
             (,f ,@args)
             ,(if (null? body)
                `(error ,(car params) 'generic-not-defined)
                `(do ,@body))))))))

(macro (def-method sig &rest body)
  (withs (name (car sig)
          params (cdr sig)
          vtable (symbol (wstring-append (symbol-name name) "-vtable")))
    `(dict-set ,vtable
               (quote ,(cadr (car params)))
               (fn ,(cons (caar params) (cdr params)) ,@body))))

(def (ref x k)
  (if (vector? x)     (vector-ref x k)
      (bytevector? x) (bytevector-ref x k)
      (wstring? x)     (wstring-ref x k)
      (dict? x)       (dict-ref x k)
      (pair? x)       (list-ref x k)))

(macro (in x &rest xs)
  (w/uniq (g)
    `(let ,g ,x
       (or ,@(list-map (fn (x) `(is ,g ,x)) xs)))))

(macro (case-let var expr &rest args)
  (let ex (afn (args)
            (if (null? (cdr args))
                (car args)
                `(if (is ,var ,(car args))
                     ,(cadr args)
                     ,(self (cddr args)))))
    `(let ,var ,expr
       ,(ex args))))

(macro (case expr &rest args)
  (w/uniq (g)
    `(case-let ,g ,expr ,@args)))

(def (reduce f x0 xs)
  (if (null? xs)
      x0
      (reduce f (f x0 (car xs)) (cdr xs))))

(def (best f xs)
  (if xs (reduce (fn (a b) (if (f a b) a b)) (car xs) (cdr xs))))

(def (min &rest xs) (best < xs))
(def (max &rest xs) (best > xs))

(def (neg f) (fn (x) (not (f x))))

(def-generic (len x))
(def-method (len (x null)) 0)
(def-method (len (x pair)) (list-length x))
(def-method (len (x vector)) (vector-size x))
(def-method (len (x wstring)) (wstring-length x))

(def-generic (push-back x value))
(def-method (push-back (x vector) value) (vector-push-back x value))
(def-method (push-back (x bytevector) value) (bytevector-push-back x value))
(def-method (push-back (x wstring) value) (wstring-push-back x value))

(def-generic (slice x start &opt end))

(macro (accumulate-to-wstring acc-fn &rest body)
  (w/uniq (gs)
    `(withs (,gs (make-adjustable-wstring)
             ,acc-fn (fn (c) (wstring-push-back ,gs c)))
       ,@body
       ,gs)))

(macro (accumulate-to-vector acc-fn &rest body)
  (w/uniq (gv)
    `(withs (,gv (make-adjustable-vector)
             ,acc-fn (fn (c) (vector-push-back ,gv c)))
       ,@body
       ,gv)))

(macro (accumulate-to-dict acc-fn &rest body)
  (w/uniq (gd)
    `(withs (,gd (make-dict)
             ,acc-fn (fn (k v) (dict-set ,gd k v)))
       ,@body
       ,gd)))

(def (vector-for-each x f)
  (for-len i x
    (f (vector-ref x i))))

(def (list-for-each x f)
  (unless (null? x)
    (f (car x))
    (list-for-each (cdr x) f)))

(def-generic (for-each x f))

(def-method (for-each (x vector) f) (vector-for-each x f))
(def-method (for-each (x wstring) f) (wstring-for-each x f))
(def-method (for-each (x null) f)   none)
(def-method (for-each (x pair) f)   (list-for-each x f))
(def-method (for-each (x dict) f)   (dict-for-each x f))
(def-method (for-each (x range) f)  (range-for-each x f))

(macro (for var xs &rest body)
  (if (symbol? var)        `(for-each ,xs (fn (,var) ,@body))
      (car-is var 'vector) (w/uniq (g)
                             `(for-each ,xs (fn (,g) (let ,var ,g ,@body))))
      (pair? var)          `(for-each ,xs (fn ,var ,@body))
                           (error "Can't destructure " var)))

(def (append &rest xs)
  (let x (car xs)
    (if (wstring? x) (apply wstring-append xs)
        (list? x)   (apply list-append xs)
        (vector? x) (apply vector-append xs))))

(macro (accumulate-reversed acc-fn &rest body)
  (w/uniq (gl)
    `(withs (,gl nil
             ,acc-fn (fn (x) (push x ,gl)))
       ,@body
       ,gl)))

(macro (accumulate acc-fn &rest body)
  `(reverse (accumulate-reversed ,acc-fn ,@body)))

(def (less-than n) (fn (x) (< x n)))
(def (more-than n) (fn (x) (> x n)))

(def (dict &rest content)
  (accumulate-to-dict acc
    ((afn (xs)
       (if (null? xs)       nil
           (null? (cdr xs)) (acc (car xs) nil)
                            (do (acc (car xs) (cadr xs))
                                (self (cddr xs)))))
      content)))

(def-param current-source-file nil)

(def-param current-input-port process-stdin)
(def-param current-output-port process-stdout)
(def-param current-error-port process-stderr)

(macro (with-input-from p &rest body)
  `(w/param stdin ,p ,@body))

(macro (with-output-to p &rest body)
  `(w/param current-output-port ,p ,@body))

(macro (with-errors-to p &rest body)
  `(w/param current-error-port ,p ,@body))

(def (write-char c p)
  (if (is-a p 'output-port)
      (write-rune c p)
      (cl-write-char c p)))

(def (flush-output x)
  (if (is-a x 'output-port)
      (flush-output-port x)
      (cl-flush-output x)))

(def (default-exception-handler e)
  (with-output-to (current-error-port)
    (println "Unhandled exception: " e)
    (exit 1)))

(current-exception-handler default-exception-handler)

(def (peek-char s)
  (if (is-a s 'input-port)
      (peek-rune s)
      (cl-peek-char s)))

(def (skip-space s)
  (if-let c (peek-char s)
    (if (whitespace? c)
        (do (read-char s) (skip-space s))
        c)
    nil))

(def (read-char s)
  (if (is-a s 'input-port)
      (read-rune s)
      (cl-read-char s)))

(def (read-line s)
  (if (peek-char s)
    (accumulate-to-wstring acc
      (whiler c (read-char s) (not (in c nil #\newline))
        (acc c)))
    nil))

(def (whitespace? c)
  (or (is c #\space)
      (is c #\tab)
      (is c #\newline)
      (is c #\return)))

(def (call-with-input-wstring s f)
  (let p (open-input-wstring s)
    (f p)))

(macro (with-input-from-wstring s &rest body)
  (w/uniq (p)
    `(call-with-input-wstring
       (fn (,p) (with-input-from ,p ,@body)))))

(def (call-with-output-wstring f)
  (let p (open-output-wstring)
    (f p)
    (get-output-wstring p)))

(macro (with-output-to-wstring &rest body)
  (w/uniq (p)
    `(call-with-output-wstring
       (fn (,p) (with-output-to ,p ,@body)))))

(def-generic (close x))
(def-method (close (x cl-stream)) (cl-close x))

(macro (with-input-from-file var path &rest body)
  `(let ,var (open-input-file ,path)
     (after (do ,@body) (close ,var))))

(def (atom-delimiter? c)
  (or (whitespace? c)
      (in c #\) #\( #\[ #\] #\{ #\} #\_)))

(def-generic (write-object x p)
  (if (is-a p 'input-port)
      (write-wstring "<unknown object>" p)
      (cl-write x p))
  none)

(def (make-iomanip f)
  (annotate 'iomanip f))

(def (apply-iomanip m s)
  ((rep m) s))

(macro (iomanip s &rest body)
  `(make-iomanip (fn (,s) ,@body)))

(macro (def-iomanip sig &rest body)
  `(set ,(car sig) (make-iomanip (fn ,(cdr sig) ,@body))))

(def (iomanip? x) (is-a x 'iomanip))

(def-iomanip (void s))
(def-iomanip (flush s) (flush-output s))

(def (print &rest args)
  (let p (current-output-port)
    (for x args
      (write-object x p))))

(def (println &rest args)
  (apply print args)
  (print #\newline))

(def (error msg &rest rest)
  (apply println (cons msg rest))
  (raise 'read-error))

(def (skip-line &opt s)
  (if-let c (peek-char s)
    (do (read-char s)
        (if (is c #\newline)
          c
          (skip-line s)))
    nil))

(def (skip-space-and-comments &opt s)
  (if-let c (skip-space s)
    (if (is c #\;)
        (if (skip-line s)
            (skip-space-and-comments s)
            nil)
        c)
    nil))

(def (skip-space-and-comments-and-read-char &opt s)
  (and (skip-space-and-comments s)
       (read-char s)))

(def (read-delimited-list d s)
  ((afn (rs)
     (case (skip-space-and-comments s)
       nil (error "Expected " d)
       d   (do (read-char s) (reverse rs))
           (self (cons (sread s true) rs))))
   nil))

(def (read-wstring s)
  (let next-char (fn () (or (read-char s) (error 'read-wstring "unexpected end of file")))
    (if (is (read-char s) #\")
      (copy-wstring (accumulate-to-wstring acc
                      (whiler c (next-char) (isnt c #\")
                        (case c
                          #\\ (case-let nc (next-char)
                                #\n (acc #\newline)
                                #\t (acc #\tab)
                                    (acc nc))
                              (acc c)))))
      nil)))

(def (read-atom-as-wstring &opt s)
  (if (skip-space-and-comments s)
    (accumulate-to-wstring acc
      (whiler c (peek-char s) (and c (not (atom-delimiter? c)))
        (acc (read-char s))))
    nil))

(def (testify x)
  (if (proc? x)
      x
      (fn (y) (is x y))))

(def (read-until test &opt s)
  (let f (testify test)
    (accumulate-to-wstring acc
      (whiler c (peek-char s) (and c (not (f c)))
        (acc (read-char s))))))

(w/uniq (eof)

  (def (eof? x) (is x eof))

  (def (read-atom &opt s)
    (if-let str (read-atom-as-wstring s)
      (let x (call-with-input-wstring str (fn (p) (cl-sread p)))
        (let c (peek-char s)
          (if (in c #\_)
              (do (read-char s)
                  (let y (sread s true)
                    `(ref ,x ,y)))
              x)))
      eof))

  (def (read-hash-value &opt s)
    (let next-char (fn () (or (read-char s) (raise 'read-hash-value)))
      (if (is (and (skip-space-and-comments s) (read-char s)) #\#)
        (let str (with-output-to-wstring
                   (case-let c (next-char)
                     #\\ (let nc (next-char)
                           (print #\# c nc (unless (atom-delimiter? nc)
                                                   (read-until atom-delimiter? s))))
                         (print #\# c (read-until atom-delimiter? s))))
          (call-with-input-wstring str (fn (p) (cl-sread p))))
        nil)))

  (def (sread &opt s error-on-eof)
    (case-let c (skip-space-and-comments s)
      nil (if error-on-eof (error "Unexpected EOF.") eof)
      #\" (read-wstring s)
      #\# (read-hash-value s)
      #\( (do (read-char s) (read-delimited-list #\) s))
      #\[ (do (read-char s) (cons 'vector (read-delimited-list #\] s)))
      #\{ (do (read-char s) (cons 'dict (read-delimited-list #\} s)))
      #\' (do (read-char s) (list 'quote (sread s true)))
      #\` (do (read-char s) (list 'quasiquote (sread s true)))
      #\, (do (read-char s)
              (if (is (peek-char s) #\@)
                  (do (read-char s)
                      (list 'unquote-splicing (sread s true)))
                  (list 'unquote (sread s true))))
          (read-atom s)))
)

(def (wstring-rfind-next s c start)
  (let test (testify c)
    ((afn (i)
      (if (>= i 0)
          (if (test (wstring-ref s i))
              i
              (self (- i 1)))
          nil))
     start)))

(def (wstring-rfind s c) (wstring-rfind-next s c (- (len s) 1)))

(def (path-dirname p)
  (if-let i (wstring-rfind p #\/)
    (wsubstring p 0 i)
    p))

(def (load path)
  (w/param current-source-file path
    (with-input-from-file f path
      (whiler e (sread f) (not (eof? e))
        (eval e)))))

(def-param test-on-import false)

(def import-paths (make-adjustable-vector))

(push-back import-paths (path-dirname (ref cl-argv 0)))

(def loaded-modules)

(def (register-module path)
  (push (cons path true) loaded-modules))

(def (loaded? path)
  (alist-ref loaded-modules path))

(def (import-module name &opt force)
  (let filename (append name ".lk")
    (point done
      (for path import-paths
        (let filepath (wstring-append path #\/ filename)
          (when (file-exists filepath)
            (when (or (not (loaded? filepath)) force)
              (load filepath)
              (register-module filepath))
            (done))))
        (raise 'import-error))))

(macro (import module)
  `(import-module (symbol-name (quote ,module))))

(macro (force-import module)
  `(import-module (symbol-name (quote ,module)) true))

(def (make-padding mortar)
  (make-iomanip (let first true
                  (fn (p)
                    (if first (reset first) (write-object mortar p))))))

(macro (w/padding name mortar &rest body)
  `(let ,name (make-padding ,mortar)
     ,@body))

(def (print-all xs &opt (sep #\space))
  (w/padding p sep
    (for x xs
      (print p x))))

(def (wstring-for-each x f)
  (for-len i x
    (f (wstring-ref x i))))

(def (write-wstring x s)
  (wstring-for-each x (fn (c) (write-char c s))))

(def-generic (write-object x p)
  (if (is-a p 'input-port)
      (write-wstring "<unknown object>" p)
      (cl-write x p))
  none)

(def-method (write-object (x null) p) (write-wstring "nil" p))

(def-method (write-object (x none) p))

(def-method (write-object (x wstring) p) (write-wstring x p))

(def-method (write-object (x vector) p)
  (with-output-to p
    (print #\[)
    (print-all x)
    (print #\])))

(def-method (write-object (x dict) s)
  (write-char #\{ s)
  (w/padding p #\space
    (dict-for-each x (fn (key value)
                       (write-object p s)
                       (write-object key s)
                       (write-object p s)
                       (write-object value s))))
  (write-char #\} s))

(import serialize)
(import hash-table)
(import seq)
(import struct)
(import bytes)
(import runes)
(import strings)
(import ports)
(import math)
(import ranges)
(import algorithms)
(import sys)
(import sockets)

;(def argv (accumulate-to-vector acc (for arg cl-argv (acc (as-utf8-string arg)))))

(def repl-prompt "ztalk> ")

(def (print-repl-prompt)
  (print repl-prompt flush))

(def (repr x) (iomanip p (serialize x p)))

(def (repl)
  (with (prompt-and-read (fn ()
                           (print-repl-prompt)
                           (sread))
         on-error        (fn (e)
                           (println "Unhandled exception: " e)))
    (whiler e (prompt-and-read) (not (eof? e))
      (let x (guard on-error (eval e))
        (unless (none? x)
          (println (repr x)))))))

(repl)
