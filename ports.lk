(import fdport)

(def-generic (read src buf start end))
(def-method (read (src fdport) buf start end) (fdport-read src buf start end))
(def-generic (write dst buf start end))
(def-method (write (dst fdport) buf start end) (fdport-write dst buf start end))

(def (write-all dst buf start end)
  (let pos start
    (while (< pos end)
      (let n (write dst buf pos end)
        (if (= n 0)
            (raise 'write-all)
            (inc pos n))))))

(def (write-bytes dst buf &opt (start 0) end)
  (if (bslice? buf)
      (write-all dst (bslice-bytevector buf)
                     (+ (bslice-start buf) start)
                     (if end
                         (min (bslice-end buf) (+ (bslice-start buf) end))
                         (bslice-end buf)))
      (write-all dst buf start (or end (bytevector-size buf)))))


(import input-port)
(import output-port)

(def (fdopen fd dir)
  (let buf-size (file-info-block-size (fdport-stat fd))
    (case dir
      'in  (raise 'not-implemented)
      'out (make-output-port fd unix-write unix-close
                             (make-bytevector buf-size) 0 true)
           (raise 'fdopen-invalid-direction))))

(def (open-input-file2 path)
  (withs (fd  (unix-open path 'input 0)
          p   (if (< fd 0)
                  (raise 'open-failed)
                  (make-fdport fd path))
          buf (make-bytevector (+ (file-info-block-size (fdport-stat p)) max-rune-length)))
    (make-input-port p buf 0 0)))

(def (call-with-input-file path f)
  (let p (open-input-file2 path)
    (after (f p) (close-input-port p))))

(macro (with-input-from-file path &rest body)
  (w/uniq (p)
    `(call-with-input-file ,path
       (fn (,p) (with-input-from ,p ,@body)))))

(def-method (write (dst bytevector) buf start end)
  (append-bytes! dst buf start end)
  (- end start))

(def-method (close (x bytevector)))

(def (open-output-bytevector)
  (with (backend (make-adjustable-bytevector 0)
         buf     (make-bytevector max-rune-length))
    (make-output-port backend buf 0 0)))

(def (open-output-file path)
  (withs (fd (unix-open path 'output #o777)
          p  (if (< fd 0)
                 (raise 'open-failed)
                 (make-fdport fd path))
          n  (file-info-block-size (fdport-stat p))
          buf (make-bytevector (+ n max-rune-length)))
    (make-output-port p buf 0 n)))

(def (call-with-output-file path f)
  (let p (open-output-file path)
    (after (f p) (close-output-port p))))

(macro (with-output-to-file path &rest body)
  (w/uniq (p)
    `(call-with-output-file ,path
       (fn (,p) (with-output-to ,p ,@body)))))

(when (test-on-import)
  true
)
