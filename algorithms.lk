(def max-container-size (expt 2 48))

(def leo
  (withs (leo-seq (afn (a b) (seq a (self b (+ a b 1))))
          v       (seq->vector (seq-first-that (leo-seq 1 1)
                                               (less-than max-container-size))))
    (fn (i) v_i)))

(macro (leo-normilize p n)
  `(while (= (bitwise-and ,p 1) 0)
     (set ,p (>> ,p 1))
     (set ,n (+ ,n 1))))

(def (leo-sift v top n)
  (when (> n 1)
    (let child (- top (leo (- n 2)) 1)
      (when (< v_child v_(- top 1))
        (set child (- top 1))
        (set n (- n 1)))
      (when (< v_top v_child)
        (swap v_top v_child)
        (leo-sift v child (- n 1))))))

(def (leo-trinkle v top p n)
  (when (> p 0)
    (leo-normilize p n)
    (let ntop (- top (leo n))
      (if (or (= p 1) (< v_ntop v_top)) (leo-sift v top n)
          (< n 2) (do (swap v_ntop v_top)
                      (leo-trinkle v ntop (- p 1) n))
                  (with (child (+ ntop (leo (- n 1)))
                         nn    n)
                    (when (< v_child v_(- top 1))
                      (set child (- top 1))
                      (set nn (- nn 1)))
                    (if (< v_child v_ntop)
                        (do (swap v_ntop v_top)
                            (leo-trinkle v ntop (- p 1) n))
                        (do (swap v_child v_top)
                            (leo-sift v child (- nn 1)))))))))

(def (leo-semitrinkle v top p n)
  (let ntop (- top (leo n))
    (when (and (> p 1) (< v_top v_ntop))
      (swap v_ntop v_top)
      (leo-trinkle v ntop (- p 1) n))))

(def (vector-smoothsort v)
  (let N (vector-size v)
    (let sort (afn (i p n)
                (when (> i 1)
                  (set p (- p 1))
                  (if (< n 2)
                      (do (leo-normilize p n)
                          (self (- i 1) p n))
                      (do (leo-semitrinkle v (- i (leo (- n 2)) 2) (+ (<< p 1) 1) (- n 1))
                          (leo-semitrinkle v (- i 2)               (+ (<< p 2) 3) (- n 2))
                          (self (- i 1) (+ (<< p 2) 3) (- n 2))))))
      ((afn (i p n)
         (if (< i N)
           (if (= (bitwise-and p 2) 2)
               (do (leo-sift v (- i 1) n)
                   (self (+ i 1) (+ (>> p 2) 1) (+ n 2)))
               (do (if (< (+ i (leo (- n 1))) N)
                       (leo-sift v (- i 1) n)
                       (leo-trinkle v (- i 1) p n))
                   (if (< n 2)
                     (self (+ i 1) (<< p 1) 0)
                     (self (+ i 1) (+ (<< p (- n 1)) 1) 1))))
           (do (leo-trinkle v (- N 1) (bitwise-or p 1) n)
               (sort N p n))))
       3 1 2))))

(def (vector-slice-lower-bound v x start end)
  (if (< start end)
      (let m (div (+ start end) 2)
        (if (<= x v_m)
            (vector-slice-lower-bound v x start m)
            (vector-slice-lower-bound v x (+ m 1) end)))
      start))

(def (vector-lower-bound v x)
  (vector-slice-lower-bound v x 0 (vector-size v)))

(def (vector-slice-upper-bound v x start end)
  (if (< start end)
      (let m (div (+ start end) 2)
        (if (< x v_m)
            (vector-slice-upper-bound v x start m)
            (vector-slice-upper-bound v x (+ m 1) end)))
      start))

(def (vector-upper-bound v x)
  (vector-slice-upper-buind v x 0 (vector-size v)))

(def (vector-insertsort v)
  (with (insert (afn (i end x)
                  (if (< i end)
                      (do (vector-set v end  v_(- end 1))
                          (self i (- end 1) x))
                      (vector-set v i x)))
         N (vector-size v))
    ((afn (i)
       (when (< i N)
         (withs (x v_i
                 ub (vector-slice-upper-bound v x 0 i))
           (insert ub i x)
           (self (+ i 1)))))
     0)))

(def (vector-sort x)
  (if (< (len x) 150)
      (vector-insertsort x)
      (vector-smoothsort x)))

(def (sort x)
  (if (vector? x) (vector-sort x)
                  (raise 'generic-type-error)))

(def (list-sorted? l)
  (let reduce (afn (x rest)
                (or (null? rest)
                    (and (<= x (car rest))
                         (self (car rest) (cdr rest)))))
    (or (null? l) (reduce (car l) (cdr l)))))

(def (vector-sorted? v)
  (let n (- (vector-size v) 2)
    ((afn (i)
       (or (> i n)
           (and (<= v_i v_(+ i 1))
                (self (+ i 1)))))
     0)))

(def (sorted? x)
  (if (vector? x) (vector-sorted? x)
      (pair? x)   (list-sorted? x)))

(when (test-on-import)
  (let x (range->vector (range 200 0 -1))
    (sort x)
    (if (not (sorted? x)) (raise 'test-failed))))
