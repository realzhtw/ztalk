(struct output-port
           backend
           buffer      ; at least max-rune-length extra bytes even if unbuffered
  &mutable buf-wrpos
           buf-endpos) ; 0 when unbuffered

(def (output-port-buffered? p)
  (> (output-port-buf-endpos p) 0))

(def (output-port-buffer-size p)
  (output-port-buf-endpos p))

(def (output-port-buffer-empty? p)
  (= (output-port-buf-wrpos p) 0))

(def (output-port-buffer-space-left p)
  (- (output-port-buf-endpos p) (output-port-buf-wrpos p)))

(def (output-port-buffer-full? p)
  (<= (output-port-buffer-space-left p) 0))

(def (flush-output-port p)
  (with (wrpos  (output-port-buf-wrpos p)
         endpos (output-port-buf-endpos p))
    (let n (min wrpos endpos)
      (write-all (output-port-backend p)
                 (output-port-buffer p)
                 0 n)
      (if (> wrpos endpos)
        (let buf (output-port-buffer p)
          (copy-bytes! buf buf 0 endpos wrpos)))
      (dec (output-port-buf-wrpos p) n)
      n)))

(def (output-port-advance-wrpos p n)
  (inc (output-port-buf-wrpos p) n)
  (if (output-port-buffer-full? p)
      (flush-output-port p))
  n)

(def (output-port-write p buf start end)
  (if (output-port-buffered? p)
    (let n (min (- end start) (output-port-buffer-space-left p))
      (copy-bytes! (output-port-buffer p) buf 
                   (output-port-buf-wrpos p) start (+ start n))
      (output-port-advance-wrpos p n))
    (write (output-port-backend p) buf start end)))

(def-method (write (x output-port) buf start end)
  (output-port-write x buf start end))

(def (write-byte b p)
  (let buf (output-port-buffer p)
    (bytevector-set buf (output-port-buf-wrpos p) b)
    (if (output-port-buffered? p)
        (output-port-advance-wrpos p 1)
        (write (output-port-backend p) buf 0 1))))

(def (write-rune r p)
  (let buf (output-port-buffer p)
    (let n (encode-rune r buf (output-port-buf-wrpos p))
      (if (output-port-buffered? p)
          (output-port-advance-wrpos p n)
          (write (output-port-backend p) buf 0 n)))))

(def (close-output-port p)
  (if (not (output-port-buffer-empty? p))
    (flush-output-port p))
  (close (output-port-backend p)))

(def-method (close (x output-port))
  (close-output-port x))

(def-method (serialize (x output-port) p)
  (let backend (output-port-backend x)
    (with-output-to p
      (if (fdport? backend)     (print "<file-output-port name=\"" (fdport-name backend) "\" buf="
                                       (repr (slice (output-port-buffer x) 0 16)) #\>)
          (bytevector? backend) (print "<bytevector-output-port>")
                                (print "<output-port>")))))
