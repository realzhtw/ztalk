(struct output-port
           backend
           buffer
  &mutable buf-wrpos
           buf-endpos) ; there is extra space after buf-endpos for a full rune

(def (output-port-buffer-size p)
  (output-port-buf-endpos p))

(def (output-port-buffer-empty? p)
  (= (output-port-buf-wrpos p) 0))

(def (output-port-buffer-space-left p)
  (- (output-port-buf-endpos p) (output-port-buf-wrpos p)))

(def (output-port-buffer-full? p)
  (<= (output-port-buffer-space-left p) 0))

(def (flush-output-port p)
  (with (wrpos  (output-port-buf-wrpos p)
         endpos (output-port-buf-endpos p))
    (let n (min wrpos endpos)
      (write-all (output-port-backend p)
                 (output-port-buffer p)
                 0 n)
      (if (> wrpos endpos)
        (copy-bytes (output-port-buffer p) 0
                    (output-port-buffer p) endpos wrpos))
      (dec (output-port-buf-wrpos p) n)
      n)))

(def (output-port-write p buf start end)
  (let n (min (- end start) (output-port-buffer-space-left p))
    (copy-bytes (output-port-buffer p)
                (output-port-buf-wrpos p)
                buf start (+ start n))
    (inc (output-port-buf-wrpos p) n)
    (if (output-port-buffer-full? p)
      (flush-output-port p))
    n))

(def-method (write (x output-port) buf start end)
  (output-port-write x buf start end))

(def (write-byte p b)
  (bytevector-set (output-port-buffer p) (output-port-buf-wrpos p) b)
  (inc (output-port-buf-wrpos p)))

(def (write-rune p r)
  (let n (utf8-encode-rune r (output-port-buffer p) (output-port-buf-wrpos p))
    (inc (output-port-buf-wrpos p) n)
    (if (output-port-buffer-full? p)
      (flush-output-port p))
    n))

(def (close-output-port p)
  (if (not (output-port-buffer-empty? p))
    (flush-output-port p))
  (close (output-port-backend p)))

(def-method (close (x output-port))
  (close-output-port x))

(def-method (write-object (x output-port) s)
  (let backend (output-port-backend x)
    (w/stdout s
      (if (fdport? backend)
          (print "<file-output-port name=\"" (fdport-name backend) "\" buf=" (output-port-buffer-size x) " bytes>")
          (print "<output-port>")))))
