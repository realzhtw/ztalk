;(import test)
;(def-method (write-object (x vector) p)
;  (with-output-to p
;    (print #\[)
;    (print-all x)
;    (print #\])))

;(def-method (write-object (x dict) p)
;  (with-output-to p
;    (print #\{)
;    (w/padding p #\space
;      (dict-for-each x (fn (key value) (print p key p value))))
;    (print #\})))

(def-method (write-object (x char) s) (write-char x s))

(def-method (write-object (x symbol) s) (write-wstring (symbol-name x) s))

(def (print-cdr x)
  (unless (null? x)
    (if (pair? x)
       (do (print #\space (car x))
           (print-cdr (cdr x)))
       (print " . " x))))

(def-method (write-object (x pair) s)
  (with-output-to s
    (print #\( (car x))
    (print-cdr (cdr x))
    (print #\))))

(def-method (write-object (x macro) s)
  (with-output-to s
    (print "<macro " (fn-params (rep x)) #\>)))

(def-method (write-object (x fn) s)
  (with-output-to s
    (print "<fn " (fn-params x) #\>)))

(def-method (write-object (x iomanip) s)
  (apply-iomanip x s))

(def-generic (serialize x p) (write-object x p))
