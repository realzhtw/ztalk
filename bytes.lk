(def-method (len (x bytevector)) (bytevector-size x))

(def-method (for-each (x bytevector) f)
  (for-len i x
    (f (bytevector-ref x i))))

(def (in-range x a b) (and (<= a x) (< x b)))

(set ascii-7-14 [#\a #\b #\t #\n #\v #\f #\r])

(def hex-digit
  (let hex-digits [#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                   #\a #\b #\c #\d #\e #\f]
    (fn (x)
      (vector-ref hex-digits (mod x 16)))))

(def (print-bytevector-slice p buf start end)
  (with-output-to p
    (print "b\"")
      (for i (range start end)
        (let b (bytevector-ref buf i)
          (if (= b 0)             (print #\\ #\0)
              (in-range b  7  14) (print #\\ (vector-ref ascii-7-14 (- b 7)))
              (in-range b 32 128) (print (char b))
                                  (print "\\x" (hex-digit (>> b 4)) (hex-digit b)))))
    (print #\")))

(def-method (serialize (x bytevector) p)
  (print-bytevector-slice p x 0 (bytevector-size x)))

(def-method (write-object (x bytevector) p)
  (write-bytes p x))

(struct bslice
  bytevector
  &mutable start
  &mutable end)

(def (bslice-ref x i)
  (bytevector-ref (bslice-bytevector x)
                  (+ (bslice-start x) i)))

;(def-method (ref (x bslice) i) (bslice-ref x i))

(def-method (write-object (x bslice) s)
  (print-bytevector-slice s (bslice-bytevector x)
                            (bslice-start x)
                            (bslice-end x)))


(def (bslice-size x) (- (bslice-end x) (bslice-start x)))

(def (copy-bslice x)
  (with (b     (bslice-bytevector x)
         start (bslice-start x)
         end   (bslice-end x))
  (let r (make-bytevector (- end start))
    (copy-bytes r 0 b start end)
    r)))

(def (slice-bytevector x start &opt (end nil))
  (make-bslice x start (or end (bytevector-size x))))

(def-method (slice (x bytevector) start end)
  (slice-bytevector x start end))

(def (append-bytes! x buf &opt (start 0) (end nil))
  (if (bslice? buf)
      (append-bytes x (bslice-bytevector buf)
                      (+ (bslice-start buf) start)
                      (if end
                          (min (bslice-end buf) (+ (bslice-start buf) end))
                          (bslice-end buf)))
      (withs (pos (bytevector-size x)
              end (or end (bytevector-size buf))
              n   (- end start))
        (bytevector-resize x (+ pos n))
        (copy-bytes x pos buf start end))))
