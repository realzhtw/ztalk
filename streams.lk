(struct output-stream
    backend
    backend-write
    backend-close
    buffer
    &mutable buf-wrpos
    &mutable is-open)

(def (output-stream-buffered? os)
  (not (null? (output-stream-buffer os))))

(def (output-stream-buffer-size os)
  (vector-size (output-stream-buffer os)))

(def (output-stream-buffer-space-left os)
  (- (output-stream-buffer-size os)
     (output-stream-buf-wrpos os)))

(def (output-stream-buffer-full? os)
  (= (output-stream-buffer-space-left os) 0))

(def (output-stream-buffer-empty? os)
  (= (output-stream-buffer-wrpos os) 0))

(def (output-stream-write-to-backend os buf start end)
  ((output-stream-backend-write os) (output-stream-backend os) buf start end))

(def (output-stream-close-backend os)
  ((output-stream-backend-close os) (output-stream-backend os)))

(def (output-stream-advance-buf-wrpos os n)
  (output-stream-set-buf-wrpos os (+ (output-stream-buf-wrpos os) n)))

(def (output-stream-write-to-buffer os buf start end)
  (let n (min (- end start) (output-stream-buffer-space-left os))
    (copy-bytes (output-stream-buffer os) (output-stream-buf-wrpos os)
                buf start end)
    (output-stream-advance-buf-wrpos os n)
    n))

(def (flush-output-stream os)
  (let n (output-stream-buf-wrpos os)
    (output-stream-backend-write os (output-stream-buffer os) 0 n)
    (output-stream-set-buf-wrpos os 0)
    n))

(def (output-stream-write-some-bytes os buf start end)
  (if (output-stream-buffered? os)
      (let n (output-stream-write-to-buffer os buf start end)
        (if (output-stream-buffer-full? os)
          (flush-output-stream os))
        n)
      (output-stream-backend-write os buf start end)))

(def (output-stream-write-bytes s buf &opt (start 0) end)
  (if (no end) (set end (bytevector-size buf)))
  (while (< start end)
    (let n (output-stream-write-some-bytes s buf start end)
      (set start (+ start n)))))

(def (close-output-stream s)
  (when (output-stream-is-open s)
    (if (output-stream-buffer-empty? s)
      (flush-output-stream s))
    (output-stream-close-backend s)
    (output-stream-set-is-open false)))

(def (fdopen fd dir)
  (let buf-size (file-info-block-size (fstat fd))
    (case dir
      'in  (raise 'not-implemented)
      'out (make-output-stream fd unix-write unix-close
                               (make-bytevector buf-size) 0 true)
           (raise 'fdopen-invalid-direction))))
