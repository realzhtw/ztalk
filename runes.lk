(def max-rune-length 6)

(def (rune-length r)
  (let x (char-code r)
    (if (< x       #x80) 1
        (< x      #x800) 2
        (< x    #x10000) 3
        (< x   #x200000) 4
        (< x  #x4000000) 5
        (< x #x80000000) 6
                         nil)))

(def (encode-rune! buf pos r)
  (let x (char-code r)
    (if (< x #x80)
        (do (bytevector-set buf pos x) 1)
        (let n (rune-length r)
          (bytevector-set buf pos (bitwise-or (bitwise-and #xff (<< #xfc (- 6 n)))
                                              (>> x (* (- n 1) 6))))
          (for i (range 1 n)
            (bytevector-set buf (+ pos i)
                                (bitwise-or #x80
                                            (bitwise-and #x3f (>> x (* (- n i 1) 6))))))
          n))))

(def (encode-rune r)
  (let buf (make-bytevector (rune-length r))
    (encode-rune! buf 0 r)
    buf))

(def (decode-rune-length b)
  (if (= (>> b 7)   0) 1
      (= (>> b 5)   6) 2
      (= (>> b 4)  14) 3
      (= (>> b 3)  30) 4
      (= (>> b 2)  62) 5
      (= (>> b 1) 126) 6
                       nil))

(def (decode-rune buf pos)
  (let b0 (bytevector-ref buf pos)
    (if (< b0 #x80)
        (char b0)
        (withs (n (decode-rune-length b0)
                x (bitwise-and b0 (- (<< 1 (- 7 n)) 1)))
          (for i (range 1 n)
            (set x (bitwise-or (<< x 6)
                               (bitwise-and (bytevector-ref buf (+ pos i)) #x3f))))
          (char x)))))

(when (test-on-import)
  (with (buf (bytes 0 0 0 0)
         c   #\ÑŽ)
    (encode-rune! buf 0 c)
    (if (not (is c (decode-rune buf 0)))
      (raise 'test-on-import))))
